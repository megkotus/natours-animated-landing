/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* important to include pseudo el here to ensure correct inheritance */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* Best practice - better for plug-ins */
  box-sizing: inherit;
}

html {
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: #777;
  padding: 3rem;

  /* borders are not added to the total size of a box */
  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, #7ed56fc1, #28b485c1),
    url(../img/hero.jpg);
  /* tries to fit the el inside of the box = no matter the vp size */
  background-size: cover;
  /* stay at the top of the container */
  background-position: top;
  position: relative;

  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
  position: absolute;
  /* Calculated from the parent el (set to relative) */
  top: 4rem;
  left: 4rem;
}

/* .logo-box:hover .logo {
  animation: moveInLeft 3s ease-out;
} */

.header__logo {
  /* the width will be specified automatically */
  height: 3.5rem;
}

.header__text-box {
  position: absolute;
  /* Percentage related to the parent element */
  top: 40%;
  left: 50%;
  /* Percentage of the el itself */
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  /* removes possible animation glitch */
  backface-visibility: hidden;
  margin-bottom: 6rem;
}

.heading-primary--main {
  /* Creates a block */
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  animation: moveInLeft 1s;
  animation-timing-function: ease-out;

  /* animation-iteration-count: 3; - repeat 3 times */
  /* animation-delay: 1s; */
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;

  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    /* Shift it */
    transform: translateX(-10rem);
  }
  80% {
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    /* Return */
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    /* Shift it */
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    /* Return */
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    /* Shift it */
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Pseudo classes: link for normal initial state */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  /* To handle it as a block el and not an inline el */
  display: inline-block;
  border-radius: 10rem;
  /* How long the animation transition lasts */
  transition: all 0.1s;
  position: relative;
}

.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgb(0, 0, 0, 0.1);
}

.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgb(0, 0, 0, 0.1);
}

/* This is a separate class to specify color of this particular btn */
.btn--white {
  background-color: #fff;
  color: #777;
}

/* Creates a copy of the button and places it behind it. Is treated as a child el of the button */
.btn::after {
  /* Doesn't work without content property */
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  /* Put it behind */
  z-index: -1;
  /* Transform throws an err */
  transition-property: all;
  transition-duration: 0.2s;
}

.btn--white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* Automatically set styles to 0 before the animation starts - so at load btn is hidden */
  animation-fill-mode: backwards;
}
